#!@bash@/bin/bash

# Prepare to use tools from Nixpkgs.
PATH=@DEP_PATH@${PATH:+:}$PATH

set -euo pipefail

function setFlakeParam() {
  local flake="${ENV_PARAM%#*}"

  case $ENV_PARAM in
    *#*)
      local env="${ENV_PARAM#*#}"
      ;;
    *)
      local env=""
      ;;
  esac

  FLAKE_ROOT="$flake"
  FLAKE_ENV="$env"
  NIX_SYSTEM=$(nix eval --expr builtins.currentSystem --raw --impure)

  export FLAKE_ROOT
  export FLAKE_ENV
  export NIX_SYSTEM
}

function doInfo() {
  if [[ "$USE_FLAKE" == true ]]; then
    doInfoFlake
  else
    doInfoAttr
  fi
}

function doInfoAttr() {
  if [[ -z $ENV_PARAM ]]; then
    doHelp
    exit 1
  fi

  local info
  info=$(nix-instantiate --eval --strict --json "$FILE_PARAM" -A "$ENV_PARAM.meta")

  if [[ "$INFO_JSON" == "true" ]]; then
    echo "$info"
  else
    echo "Repository: $(echo "$info" | jq -r .repository)"
    echo "Branch:     $(echo "$info" | jq -r .branch)"
  fi
}

function doInfoFlake() {
  if [[ -z "$FLAKE_ENV" ]]; then
    doHelp
    exit 1
  fi

  local info
  info=$(nix eval "${FLAKE_ROOT}#nixidyEnvs.${NIX_SYSTEM}.${FLAKE_ENV}.meta" --json)

  if [[ "$INFO_JSON" == "true" ]]; then
    echo "$info"
  else
    echo "Repository: $(echo "$info" | jq -r .repository)"
    echo "Branch:     $(echo "$info" | jq -r .branch)"
  fi
}

function doBuild() {
  if [[ "$USE_FLAKE" == true ]]; then
    doBuildFlake
  else
    doBuildAttr
  fi
}

function doBuildAttr() {
  if [[ -z $ENV_PARAM ]]; then
    doHelp
    exit 1
  fi

  nix-build "$FILE_PARAM" -A "$ENV_PARAM.environmentPackage" "${BUILD_PARAMS[@]}"
}

function doBuildFlake() {
  if [[ -z "$FLAKE_ENV" ]]; then
    doHelp
    exit 1
  fi
  
  nix build "${FLAKE_ROOT}#nixidyEnvs.${NIX_SYSTEM}.${FLAKE_ENV}.environmentPackage" "${BUILD_PARAMS[@]}"
}

function doSwitch() {
  if [[ "$USE_FLAKE" == true ]]; then
    doSwitchFlake
  else
    doSwitchAttr
  fi
}

function doSwitchAttr() {
  if [[ -z $ENV_PARAM ]]; then
    doHelp
    exit 1
  fi

  ENVIRON=$(nix-build "$FILE_PARAM" -A "$ENV_PARAM.activationPackage" --no-link)

  "${ENVIRON}/activate"
}

function doSwitchFlake() {
  if [[ -z "$FLAKE_ENV" ]]; then
    doHelp
    exit 1
  fi

  ENVIRON=$(nix build "${FLAKE_ROOT}#nixidyEnvs.${NIX_SYSTEM}.${FLAKE_ENV}.activationPackage" --no-link --print-out-paths)

  "${ENVIRON}/activate"
}

function doApply() {
  if [[ "$USE_FLAKE" == true ]]; then
    doApplyFlake
  else
    doApplyAttr
  fi
}

function doApplyAttr() {
  if [[ -z $ENV_PARAM ]]; then
    doHelp
    exit 1
  fi

  OUTPUT=$(nix-build "$FILE_PARAM" -A "$ENV_PARAM.declarativePackage" --no-link)

  "${OUTPUT}/apply"
}

function doApplyFlake() {
  if [[ -z "$FLAKE_ENV" ]]; then
    doHelp
    exit 1
  fi

  OUTPUT=$(nix build "${FLAKE_ROOT}#nixidyEnvs.${NIX_SYSTEM}.${FLAKE_ENV}.declarativePackage" --no-link --print-out-paths)

  "${OUTPUT}/apply"
}

function doBootstrap() {
  if [[ "$USE_FLAKE" == true ]]; then
    doBootstrapFlake
  else
    doBootstrapAttr
  fi
}

function doBootstrapAttr() {
  if [[ -z $ENV_PARAM ]]; then
    doHelp
    exit 1
  fi

  BOOTSTRAP=$(nix-build "$FILE_PARAM" -A "$ENV_PARAM.bootstrapPackage" --no-link)

  for manifest in "$BOOTSTRAP"/*.yaml; do
    echo "---"
    cat "$manifest"
  done
}

function doBootstrapFlake() {
  if [[ -z "$FLAKE_ENV" ]]; then
    doHelp
    exit 1
  fi

  BOOTSTRAP=$(nix build "${FLAKE_ROOT}#nixidyEnvs.${NIX_SYSTEM}.${FLAKE_ENV}.bootstrapPackage" --no-link --print-out-paths)

  for manifest in "$BOOTSTRAP"/*.yaml; do
    echo "---"
    cat "$manifest"
  done
}

function doHelp() {
    echo "Usage: $0 [OPTION] COMMAND"
    echo
    echo "Options"
    echo
    echo "  --no-link          Don't create a result symlink (only used in build)."
    echo "  --out-link PATH    Create a custom result symlink (only used in build)."
    echo "  --print-out-paths  Print the resulting output paths (only used in build)."
    echo "  --json             Output info in JSON format (only used in info)."
    echo "  -f, --file PATH    Specify path to entrypoint nix file (only flake-less)."
    echo "  -h                 Print this help"
    echo
    echo "ENV parameter"
    echo
    echo "  All sub-commands take an \`ENV\` parameter, this parameter is used to"
    echo "  determine if flakes or flake-less nix should be used and which environment"
    echo "  should be built."
    echo
    echo "  Example:"
    echo "  - \`.#prod\`:  Uses a flake in the local directory."
    echo "  - \`prod\`:    Does not use flake but builds the \`prod\` environment in"
    echo "               \`default.nix\` by default (can be overridden with --file)."
    echo
    echo "Commands"
    echo
    echo "  help             Print this help."
    echo
    echo "  info ENV         Get info about environment."
    echo "                   Example: .#prod"
    echo
    echo "  build ENV        Build nixidy environment from flake URI."
    echo "                   Example: .#prod"
    echo
    echo "  switch ENV       Build and switch to nixidy environment from flake URI."
    echo "                   Example: .#prod"
    echo
    echo "  bootstrap ENV    Output a manifest to bootstrap appOfApps."
    echo "                   Example: .#prod"
    echo
    echo "  apply ENV        Build and apply declarative manifests to Kubernetes."
    echo "                   Example: .#prod"
}

COMMAND=""
USE_FLAKE=true
ENV_PARAM=""
FILE_PARAM=""

BUILD_PARAMS=()
INFO_JSON="false"

while [[ $# -gt 0 ]]; do
  opt="$1"
  shift
  case $opt in
    build|switch|info|bootstrap|help|apply)
      COMMAND="$opt"
      ;;
    --no-link)
      BUILD_PARAMS+=("--no-link")
      ;;
    --print-out-paths)
      BUILD_PARAMS+=("--print-out-paths")
      ;;
    --out-link)
      BUILD_PARAMS+=("--out-link" "$1")
      shift
      ;;
    --json)
      INFO_JSON="true"
      ;;
    -f|--file)
      FILE_PARAM="$1"
      USE_FLAKE=false
      ;;
    -h|--help)
      doHelp
      exit 0
      ;;
    *)
      ENV_PARAM="$opt"
      ;;
  esac
done

if [[ -z $COMMAND ]]; then
    doHelp >&2
    exit 1
fi

# Detect if we should use a flake or flake-less approach
FLAKE_FILTER='^[a-zA-Z0-9\:\/\.\@\_\-]+#[a-zA-Z0-9\.\@\_\-]*$'
if [[ $ENV_PARAM =~ $FLAKE_FILTER ]]; then
  setFlakeParam
else
  USE_FLAKE=false
fi

case $COMMAND in
  info)
    doInfo
    ;;
  build)
    doBuild
    ;;
  switch)
    doSwitch
    ;;
  bootstrap)
    doBootstrap
    ;;
  apply)
    doApply
    ;;
  help)
    doHelp
    ;;
  *)
    _iError 'Unknown command: %s' "$COMMAND" >&2
    doHelp >&2
    exit 1
    ;;
esac

