[{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>key is the key to project.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.configMap.items.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.configMap.items.*.mode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.configMap.items.*.path"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.configMap.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>optional specify whether the ConfigMap or its keys must be defined</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.configMap.optional"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>downwardAPI information about the downwardAPI data to project</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Items is a list of DownwardAPIVolume file</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.fieldRef"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Version of the schema the FieldPath is written in terms of, defaults to &quot;v1&quot;.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.fieldRef.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Path of the field to select in the specified API version.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.fieldRef.fieldPath"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.mode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.path"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.resourceFieldRef"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Container name: required for volumes, optional for env vars</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.resourceFieldRef.containerName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Specifies the output format of the exposed resources, defaults to &quot;1&quot;</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.resourceFieldRef.divisor"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Required: resource to select</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.downwardAPI.items.*.resourceFieldRef.resource"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>secret information about the secret data to project</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret.items"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>key is the key to project.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret.items.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret.items.*.mode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret.items.*.path"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>optional field specify whether the Secret or its key must be defined</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.secret.optional"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>serviceAccountToken is information about the serviceAccountToken data to project</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.serviceAccountToken"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.serviceAccountToken.audience"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.serviceAccountToken.expirationSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>path is the path relative to the mount point of the file to project the token into.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.projected.sources.*.serviceAccountToken.path"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>quobyte represents a Quobyte mount on the host that shares a pod's lifetime. Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>group to map volume access to Default is no group</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte.group"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte.readOnly"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte.registry"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte.tenant"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>user to map volume access to Defaults to serivceaccount user</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte.user"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>volume is a string that references an already created Quobyte volume by name.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.quobyte.volume"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported. More info: https://examples.k8s.io/volumes/rbd/README.md</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.fsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.image"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.keyring"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"list of (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.monitors"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.pool"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.readOnly"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.secretRef"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.secretRef.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.rbd.user"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Default is &quot;xfs&quot;.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.fsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>gateway is the host address of the ScaleIO API Gateway.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.gateway"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.protectionDomain"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.readOnly"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.secretRef"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.secretRef.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>sslEnabled Flag enable/disable SSL communication with Gateway, default false</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.sslEnabled"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.storageMode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>storagePool is the ScaleIO Storage Pool associated with the protection domain.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.storagePool"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>system is the name of the storage system as configured in ScaleIO.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.system"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.scaleIO.volumeName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.defaultMode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.items"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>key is the key to project.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.items.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.items.*.mode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.items.*.path"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>optional field specify whether the Secret or its keys must be defined</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.optional"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.secret.secretName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos.fsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos.readOnly"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos.secretRef"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos.secretRef.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos.volumeName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot; if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.storageos.volumeNamespace"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine. Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type are redirected to the csi.vsphere.vmware.com CSI driver.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.vsphereVolume"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.vsphereVolume.fsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.vsphereVolume.storagePolicyID"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>storagePolicyName is the storage Policy Based Management (SPBM) profile name.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.vsphereVolume.storagePolicyName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>volumePath is the path that identifies vSphere volume vmdk</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.spec.template.spec.volumes.<name>.vsphereVolume.volumePath"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.replicationControllers.<name>.status"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The number of available replicas (ready for at least minReadySeconds) for this replication controller.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.status.availableReplicas"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Represents the latest available observations of a replication controller's current state.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.replicationControllers.<name>.status.conditions"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The last time the condition transitioned from one status to another.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.status.conditions.<name>.lastTransitionTime"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A human readable message indicating details about the transition.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.status.conditions.<name>.message"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The reason for the condition's last transition.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.replicationControllers.<name>.status.conditions.<name>.reason"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Status of the condition, one of True, False, Unknown.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.status.conditions.<name>.status"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Type of replication controller condition.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.replicationControllers.<name>.status.conditions.<name>.type"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The number of pods that have labels matching the labels of the pod template of the replication controller.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.status.fullyLabeledReplicas"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>ObservedGeneration reflects the generation of the most recently observed replication controller.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.status.observedGeneration"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The number of ready replicas for this replication controller.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.replicationControllers.<name>.status.readyReplicas"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller</p>","example":null,"read_only":false,"type":"signed integer","name":"applications.<name>.resources.replicationControllers.<name>.status.replicas"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":"<span class=\"punctuation-bracket\">{</span> <span class=\"punctuation-bracket\">}</span>\n","description":"<p>ResourceClaimTemplate is used to produce ResourceClaim objects.</p>\n<p>This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.</p>","example":null,"read_only":false,"type":"attribute set of (submodule)","name":"applications.<name>.resources.resourceClaimTemplates"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.kind"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Standard object metadata</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations</p>","example":null,"read_only":false,"type":"null or (attribute set of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.annotations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.</p>\n<p>Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.creationTimestamp"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.deletionGracePeriodSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.</p>\n<p>Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.deletionTimestamp"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.finalizers"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</p>\n<p>If this field is specified and the generated name exists, the server will return a 409.</p>\n<p>Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.generateName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.generation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels</p>","example":null,"read_only":false,"type":"null or (attribute set of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.labels"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like &quot;ci-cd&quot;. The set of fields is always in the version that the workflow used when modifying the object.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>APIVersion defines the version of this resource that this field set applies to. The format is &quot;group/version&quot; just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: &quot;FieldsV1&quot;</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.fieldsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FieldsV1 holds the first JSON version format as described in the &quot;FieldsV1&quot; type.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.fieldsV1"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Manager is an identifier of the workflow managing these fields.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.manager"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.operation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.subresource"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.managedFields.*.time"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the &quot;default&quot; namespace, but &quot;default&quot; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.</p>\n<p>Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.namespace"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>API version of the referent.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences.<name>.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If true, AND if the owner has the &quot;foregroundDeletion&quot; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs &quot;delete&quot; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences.<name>.blockOwnerDeletion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If true, this reference points to the managing controller.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences.<name>.controller"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences.<name>.kind"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.ownerReferences.<name>.uid"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.</p>\n<p>Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.resourceVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.selfLink"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.</p>\n<p>Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.metadata.uid"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Describes the ResourceClaim that is to be generated.</p>\n<p>This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations</p>","example":null,"read_only":false,"type":"null or (attribute set of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.annotations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.</p>\n<p>Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.creationTimestamp"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.deletionGracePeriodSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.</p>\n<p>Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.deletionTimestamp"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.finalizers"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</p>\n<p>If this field is specified and the generated name exists, the server will return a 409.</p>\n<p>Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.generateName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.generation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels</p>","example":null,"read_only":false,"type":"null or (attribute set of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.labels"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like &quot;ci-cd&quot;. The set of fields is always in the version that the workflow used when modifying the object.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>APIVersion defines the version of this resource that this field set applies to. The format is &quot;group/version&quot; just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: &quot;FieldsV1&quot;</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.fieldsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FieldsV1 holds the first JSON version format as described in the &quot;FieldsV1&quot; type.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.fieldsV1"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Manager is an identifier of the workflow managing these fields.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.manager"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.operation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.subresource"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.managedFields.*.time"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the &quot;default&quot; namespace, but &quot;default&quot; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.</p>\n<p>Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.namespace"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>API version of the referent.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences.<name>.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If true, AND if the owner has the &quot;foregroundDeletion&quot; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs &quot;delete&quot; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences.<name>.blockOwnerDeletion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If true, this reference points to the managing controller.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences.<name>.controller"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences.<name>.kind"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.ownerReferences.<name>.uid"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.</p>\n<p>Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.resourceVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.selfLink"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.</p>\n<p>Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.metadata.uid"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Devices defines how to request devices.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.config"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Opaque provides driver-specific configuration parameters.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.config.*.opaque"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.</p>\n<p>An admission policy provided by the driver developer could use this to decide whether it needs to validate them.</p>\n<p>Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.config.*.opaque.driver"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (&quot;kind&quot; + &quot;apiVersion&quot; for Kubernetes types), with conversion between different versions.</p>\n<p>The length of the raw data must be smaller or equal to 10 Ki.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.config.*.opaque.parameters"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.</p>\n<p>References to subrequests must include the name of the main request and may include the subrequest using the format &lt;main request&gt;[/&lt;subrequest&gt;]. If just the main request is given, the configuration applies to all subrequests.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.config.*.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>These constraints must be satisfied by the set of devices that get allocated for the claim.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.constraints"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.</p>\n<p>For example, if you specified &quot;dra.example.com/numa&quot; (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.</p>\n<p>Must include the domain qualifier.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.constraints.*.matchAttribute"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.</p>\n<p>References to subrequests must include the name of the main request and may include the subrequest using the format &lt;main request&gt;[/&lt;subrequest&gt;]. If just the main request is given, the constraint applies to all subrequests.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.constraints.*.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.</p>\n<p>One of Exactly or FirstAvailable must be set.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.</p>\n<p>This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.adminAccess"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:</p>\n<ul>\n<li>\n<p>ExactCount: This request is for a specific number of devices.\nThis is the default. The exact number is provided in the\ncount field.</p>\n</li>\n<li>\n<p>All: This request is for all of the matching devices in a pool.\nAt least one device must exist on the node for the allocation to succeed.\nAllocation will fail if some devices are already allocated,\nunless adminAccess is requested.</p>\n</li>\n</ul>\n<p>If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.</p>\n<p>More modes may get added in the future. Clients must refuse to handle requests with unknown modes.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.allocationMode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Count is used only when the count mode is &quot;ExactCount&quot;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.count"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.</p>\n<p>A DeviceClassName is required.</p>\n<p>Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.deviceClassName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.selectors"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CEL contains a CEL expression for selecting a device.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.selectors.*.cel"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.</p>\n<p>The expression's input is an object named &quot;device&quot;, which carries the following properties:</p>\n<ul>\n<li>driver (string): the name of the driver which defines this device.</li>\n<li>attributes (map[string]object): the device's attributes, grouped by prefix\n(e.g. device.attributes[&quot;dra.example.com&quot;] evaluates to an object with all\nof the attributes which were prefixed by &quot;dra.example.com&quot;.</li>\n<li>capacity (map[string]object): the device's capacities, grouped by prefix.</li>\n</ul>\n<p>Example: Consider a device with driver=&quot;dra.example.com&quot;, which exposes two attributes named &quot;model&quot; and &quot;ext.example.com/family&quot; and which exposes one capacity named &quot;modules&quot;. This input to this expression would have the following fields:</p>\n<pre><code>device.driver\ndevice.attributes[&quot;dra.example.com&quot;].model\ndevice.attributes[&quot;ext.example.com&quot;].family\ndevice.capacity[&quot;dra.example.com&quot;].modules\n</code></pre>\n<p>The device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.</p>\n<p>The value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.</p>\n<p>If an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.</p>\n<p>A robust expression should check for the existence of attributes before referencing them.</p>\n<p>For ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:</p>\n<pre><code>cel.bind(dra, device.attributes[&quot;dra.example.com&quot;], dra.someBool &amp;&amp; dra.anotherBool)\n</code></pre>\n<p>The length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.selectors.*.cel.expression"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If specified, the request's tolerations.</p>\n<p>Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.</p>\n<p>In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.</p>\n<p>The maximum number of tolerations is 16.</p>\n<p>This is an alpha field and requires enabling the DRADeviceTaints feature gate.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.tolerations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.tolerations.*.effect"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.tolerations.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.tolerations.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as &lt;time when taint was adedd&gt; + &lt;toleration seconds&gt;.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.tolerations.*.tolerationSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.exactly.tolerations.*.value"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.</p>\n<p>DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:</p>\n<ul>\n<li>\n<p>ExactCount: This request is for a specific number of devices.\nThis is the default. The exact number is provided in the\ncount field.</p>\n</li>\n<li>\n<p>All: This subrequest is for all of the matching devices in a pool.\nAllocation will fail if some devices are already allocated,\nunless adminAccess is requested.</p>\n</li>\n</ul>\n<p>If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.</p>\n<p>More modes may get added in the future. Clients must refuse to handle requests with unknown modes.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.allocationMode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Count is used only when the count mode is &quot;ExactCount&quot;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.count"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.</p>\n<p>A class is required. Which classes are available depends on the cluster.</p>\n<p>Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.deviceClassName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format &lt;main request&gt;/&lt;subrequest&gt;.</p>\n<p>Must be a DNS label.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.selectors"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CEL contains a CEL expression for selecting a device.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.selectors.*.cel"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.</p>\n<p>The expression's input is an object named &quot;device&quot;, which carries the following properties:</p>\n<ul>\n<li>driver (string): the name of the driver which defines this device.</li>\n<li>attributes (map[string]object): the device's attributes, grouped by prefix\n(e.g. device.attributes[&quot;dra.example.com&quot;] evaluates to an object with all\nof the attributes which were prefixed by &quot;dra.example.com&quot;.</li>\n<li>capacity (map[string]object): the device's capacities, grouped by prefix.</li>\n</ul>\n<p>Example: Consider a device with driver=&quot;dra.example.com&quot;, which exposes two attributes named &quot;model&quot; and &quot;ext.example.com/family&quot; and which exposes one capacity named &quot;modules&quot;. This input to this expression would have the following fields:</p>\n<pre><code>device.driver\ndevice.attributes[&quot;dra.example.com&quot;].model\ndevice.attributes[&quot;ext.example.com&quot;].family\ndevice.capacity[&quot;dra.example.com&quot;].modules\n</code></pre>\n<p>The device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.</p>\n<p>The value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.</p>\n<p>If an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.</p>\n<p>A robust expression should check for the existence of attributes before referencing them.</p>\n<p>For ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:</p>\n<pre><code>cel.bind(dra, device.attributes[&quot;dra.example.com&quot;], dra.someBool &amp;&amp; dra.anotherBool)\n</code></pre>\n<p>The length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.selectors.*.cel.expression"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If specified, the request's tolerations.</p>\n<p>Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.</p>\n<p>In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.</p>\n<p>The maximum number of tolerations is 16.</p>\n<p>This is an alpha field and requires enabling the DRADeviceTaints feature gate.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.tolerations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.effect"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as &lt;time when taint was adedd&gt; + &lt;toleration seconds&gt;.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.tolerationSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.value"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.</p>\n<p>References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.</p>\n<p>Must be a DNS label.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaimTemplates.<name>.spec.spec.devices.requests.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":"<span class=\"punctuation-bracket\">{</span> <span class=\"punctuation-bracket\">}</span>\n","description":"<p>ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.</p>\n<p>This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.</p>","example":null,"read_only":false,"type":"attribute set of (submodule)","name":"applications.<name>.resources.resourceClaims"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.kind"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Standard object metadata</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.metadata"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations</p>","example":null,"read_only":false,"type":"null or (attribute set of (string))","name":"applications.<name>.resources.resourceClaims.<name>.metadata.annotations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.</p>\n<p>Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.creationTimestamp"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.metadata.deletionGracePeriodSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.</p>\n<p>Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.deletionTimestamp"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaims.<name>.metadata.finalizers"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</p>\n<p>If this field is specified and the generated name exists, the server will return a 409.</p>\n<p>Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.generateName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.metadata.generation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels</p>","example":null,"read_only":false,"type":"null or (attribute set of (string))","name":"applications.<name>.resources.resourceClaims.<name>.metadata.labels"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like &quot;ci-cd&quot;. The set of fields is always in the version that the workflow used when modifying the object.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>APIVersion defines the version of this resource that this field set applies to. The format is &quot;group/version&quot; just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: &quot;FieldsV1&quot;</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.fieldsType"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FieldsV1 holds the first JSON version format as described in the &quot;FieldsV1&quot; type.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.fieldsV1"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Manager is an identifier of the workflow managing these fields.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.manager"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.operation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.subresource"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.managedFields.*.time"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the &quot;default&quot; namespace, but &quot;default&quot; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.</p>\n<p>Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.namespace"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>API version of the referent.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences.<name>.apiVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If true, AND if the owner has the &quot;foregroundDeletion&quot; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs &quot;delete&quot; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences.<name>.blockOwnerDeletion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If true, this reference points to the managing controller.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences.<name>.controller"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences.<name>.kind"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.metadata.ownerReferences.<name>.uid"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.</p>\n<p>Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.resourceVersion"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.selfLink"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.</p>\n<p>Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.metadata.uid"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Spec describes what is being requested and how to configure it. The spec is immutable.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.resourceClaims.<name>.spec"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Devices defines how to request devices.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.config"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Opaque provides driver-specific configuration parameters.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.config.*.opaque"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.</p>\n<p>An admission policy provided by the driver developer could use this to decide whether it needs to validate them.</p>\n<p>Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.config.*.opaque.driver"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (&quot;kind&quot; + &quot;apiVersion&quot; for Kubernetes types), with conversion between different versions.</p>\n<p>The length of the raw data must be smaller or equal to 10 Ki.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.config.*.opaque.parameters"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.</p>\n<p>References to subrequests must include the name of the main request and may include the subrequest using the format &lt;main request&gt;[/&lt;subrequest&gt;]. If just the main request is given, the configuration applies to all subrequests.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.config.*.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>These constraints must be satisfied by the set of devices that get allocated for the claim.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.constraints"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.</p>\n<p>For example, if you specified &quot;dra.example.com/numa&quot; (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.</p>\n<p>Must include the domain qualifier.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.constraints.*.matchAttribute"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.</p>\n<p>References to subrequests must include the name of the main request and may include the subrequest using the format &lt;main request&gt;[/&lt;subrequest&gt;]. If just the main request is given, the constraint applies to all subrequests.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.constraints.*.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.</p>\n<p>One of Exactly or FirstAvailable must be set.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.</p>\n<p>This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.adminAccess"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:</p>\n<ul>\n<li>\n<p>ExactCount: This request is for a specific number of devices.\nThis is the default. The exact number is provided in the\ncount field.</p>\n</li>\n<li>\n<p>All: This request is for all of the matching devices in a pool.\nAt least one device must exist on the node for the allocation to succeed.\nAllocation will fail if some devices are already allocated,\nunless adminAccess is requested.</p>\n</li>\n</ul>\n<p>If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.</p>\n<p>More modes may get added in the future. Clients must refuse to handle requests with unknown modes.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.allocationMode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Count is used only when the count mode is &quot;ExactCount&quot;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.count"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.</p>\n<p>A DeviceClassName is required.</p>\n<p>Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.deviceClassName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.selectors"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CEL contains a CEL expression for selecting a device.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.selectors.*.cel"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.</p>\n<p>The expression's input is an object named &quot;device&quot;, which carries the following properties:</p>\n<ul>\n<li>driver (string): the name of the driver which defines this device.</li>\n<li>attributes (map[string]object): the device's attributes, grouped by prefix\n(e.g. device.attributes[&quot;dra.example.com&quot;] evaluates to an object with all\nof the attributes which were prefixed by &quot;dra.example.com&quot;.</li>\n<li>capacity (map[string]object): the device's capacities, grouped by prefix.</li>\n</ul>\n<p>Example: Consider a device with driver=&quot;dra.example.com&quot;, which exposes two attributes named &quot;model&quot; and &quot;ext.example.com/family&quot; and which exposes one capacity named &quot;modules&quot;. This input to this expression would have the following fields:</p>\n<pre><code>device.driver\ndevice.attributes[&quot;dra.example.com&quot;].model\ndevice.attributes[&quot;ext.example.com&quot;].family\ndevice.capacity[&quot;dra.example.com&quot;].modules\n</code></pre>\n<p>The device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.</p>\n<p>The value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.</p>\n<p>If an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.</p>\n<p>A robust expression should check for the existence of attributes before referencing them.</p>\n<p>For ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:</p>\n<pre><code>cel.bind(dra, device.attributes[&quot;dra.example.com&quot;], dra.someBool &amp;&amp; dra.anotherBool)\n</code></pre>\n<p>The length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.selectors.*.cel.expression"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If specified, the request's tolerations.</p>\n<p>Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.</p>\n<p>In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.</p>\n<p>The maximum number of tolerations is 16.</p>\n<p>This is an alpha field and requires enabling the DRADeviceTaints feature gate.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.tolerations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.tolerations.*.effect"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.tolerations.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.tolerations.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as &lt;time when taint was adedd&gt; + &lt;toleration seconds&gt;.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.tolerations.*.tolerationSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.exactly.tolerations.*.value"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.</p>\n<p>DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.</p>","example":null,"read_only":false,"type":"null or (attribute set of (submodule) or list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:</p>\n<ul>\n<li>\n<p>ExactCount: This request is for a specific number of devices.\nThis is the default. The exact number is provided in the\ncount field.</p>\n</li>\n<li>\n<p>All: This subrequest is for all of the matching devices in a pool.\nAllocation will fail if some devices are already allocated,\nunless adminAccess is requested.</p>\n</li>\n</ul>\n<p>If AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.</p>\n<p>More modes may get added in the future. Clients must refuse to handle requests with unknown modes.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.allocationMode"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Count is used only when the count mode is &quot;ExactCount&quot;. Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.count"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.</p>\n<p>A class is required. Which classes are available depends on the cluster.</p>\n<p>Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.deviceClassName"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format &lt;main request&gt;/&lt;subrequest&gt;.</p>\n<p>Must be a DNS label.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.selectors"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>CEL contains a CEL expression for selecting a device.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.selectors.*.cel"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.</p>\n<p>The expression's input is an object named &quot;device&quot;, which carries the following properties:</p>\n<ul>\n<li>driver (string): the name of the driver which defines this device.</li>\n<li>attributes (map[string]object): the device's attributes, grouped by prefix\n(e.g. device.attributes[&quot;dra.example.com&quot;] evaluates to an object with all\nof the attributes which were prefixed by &quot;dra.example.com&quot;.</li>\n<li>capacity (map[string]object): the device's capacities, grouped by prefix.</li>\n</ul>\n<p>Example: Consider a device with driver=&quot;dra.example.com&quot;, which exposes two attributes named &quot;model&quot; and &quot;ext.example.com/family&quot; and which exposes one capacity named &quot;modules&quot;. This input to this expression would have the following fields:</p>\n<pre><code>device.driver\ndevice.attributes[&quot;dra.example.com&quot;].model\ndevice.attributes[&quot;ext.example.com&quot;].family\ndevice.capacity[&quot;dra.example.com&quot;].modules\n</code></pre>\n<p>The device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.</p>\n<p>The value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.</p>\n<p>If an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.</p>\n<p>A robust expression should check for the existence of attributes before referencing them.</p>\n<p>For ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:</p>\n<pre><code>cel.bind(dra, device.attributes[&quot;dra.example.com&quot;], dra.someBool &amp;&amp; dra.anotherBool)\n</code></pre>\n<p>The length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.selectors.*.cel.expression"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>If specified, the request's tolerations.</p>\n<p>Tolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.</p>\n<p>In addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.</p>\n<p>The maximum number of tolerations is 16.</p>\n<p>This is an alpha field and requires enabling the DRADeviceTaints feature gate.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.tolerations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.effect"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as &lt;time when taint was adedd&gt; + &lt;toleration seconds&gt;.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.tolerationSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.firstAvailable.<name>.tolerations.*.value"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.</p>\n<p>References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.</p>\n<p>Must be a DNS label.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.spec.devices.requests.<name>.name"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Status describes whether the claim is ready to use and what has been allocated.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.status"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Allocation is set once the claim has been allocated successfully.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Devices is the result of allocating devices.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.</p>\n<p>This includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.config"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Opaque provides driver-specific configuration parameters.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.config.*.opaque"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.</p>\n<p>An admission policy provided by the driver developer could use this to decide whether it needs to validate them.</p>\n<p>Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.config.*.opaque.driver"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (&quot;kind&quot; + &quot;apiVersion&quot; for Kubernetes types), with conversion between different versions.</p>\n<p>The length of the raw data must be smaller or equal to 10 Ki.</p>","example":null,"read_only":false,"type":"submodule","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.config.*.opaque.parameters"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.</p>\n<p>References to subrequests must include the name of the main request and may include the subrequest using the format &lt;main request&gt;[/&lt;subrequest&gt;]. If just the main request is given, the configuration applies to all subrequests.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.config.*.requests"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.config.*.source"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Results lists all allocated devices.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.</p>\n<p>This is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.</p>","example":null,"read_only":false,"type":"null or boolean","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.adminAccess"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Device references one device instance via its name in the driver's resource pool. It must be a DNS label.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.device"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.</p>\n<p>Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.driver"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>This name together with the driver name and the device name field identify which device was allocated (<code>&lt;driver name&gt;/&lt;pool name&gt;/&lt;device name&gt;</code>).</p>\n<p>Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.pool"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Request is the name of the request in the claim which caused this device to be allocated. If it references a subrequest in the firstAvailable list on a DeviceRequest, this field must include both the name of the main request and the subrequest using the format &lt;main request&gt;/&lt;subrequest&gt;.</p>\n<p>Multiple devices may have been allocated per request.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.request"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A copy of all tolerations specified in the request at the time when the device got allocated.</p>\n<p>The maximum number of tolerations is 16.</p>\n<p>This is an alpha field and requires enabling the DRADeviceTaints feature gate.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.tolerations"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.tolerations.*.effect"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.tolerations.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.tolerations.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as &lt;time when taint was adedd&gt; + &lt;toleration seconds&gt;.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.tolerations.*.tolerationSeconds"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value.</p>","example":null,"read_only":false,"type":"null or (string)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.devices.results.*.tolerations.*.value"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.</p>","example":null,"read_only":false,"type":"null or (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Required. A list of node selector terms. The terms are ORed.</p>","example":null,"read_only":false,"type":"list of (submodule)","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A list of node selector requirements by node's labels.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchExpressions"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The label key that the selector applies to.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchExpressions.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchExpressions.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchExpressions.*.values"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>A list of node selector requirements by node's fields.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchFields"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>The label key that the selector applies to.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchFields.*.key"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchFields.*.operator"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.</p>","example":null,"read_only":false,"type":"null or (list of (string))","name":"applications.<name>.resources.resourceClaims.<name>.status.allocation.nodeSelector.nodeSelectorTerms.*.matchFields.*.values"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.devices"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the <code>Ready</code> condition should be True.</p>\n<p>Must not contain more than 8 entries.</p>","example":null,"read_only":false,"type":"null or (list of (submodule))","name":"applications.<name>.resources.resourceClaims.<name>.status.devices.*.conditions"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.devices.*.conditions.*.lastTransitionTime"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>message is a human readable message indicating details about the transition. This may be an empty string.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.devices.*.conditions.*.message"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.</p>","example":null,"read_only":false,"type":"null or signed integer","name":"applications.<name>.resources.resourceClaims.<name>.status.devices.*.conditions.*.observedGeneration"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.devices.*.conditions.*.reason"},{"declarations":["https://github.com/arnarg/nixidy/blob/main/modules/generated/k8s/v1.33.nix"],"default":null,"description":"<p>status of the condition, one of True, False, Unknown.</p>","example":null,"read_only":false,"type":"string","name":"applications.<name>.resources.resourceClaims.<name>.status.devices.*.conditions.*.status"}]